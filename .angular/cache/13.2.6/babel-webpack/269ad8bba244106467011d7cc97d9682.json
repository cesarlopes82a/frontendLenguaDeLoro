{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\CESAR\\\\apiREST-LenguaDeLoro\\\\frontendLenguaDeLoro\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { StoreService } from 'src/app/services/store.service';\nimport { UserService } from 'src/app/services/user.service';\nimport { global } from 'src/app/services/global';\nlet SidebarComponent = class SidebarComponent {\n  constructor(_userService, _authService) {\n    var _this = this;\n\n    this._userService = _userService;\n    this._authService = _authService;\n    this.loggedUser = null;\n    this.loggedUserRole = global.loggedUserRole;\n\n    this.getUserByIdAndPopulateStores = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (userId) {\n        console.log(\"le estoy pasando el if desde el sidebar a getUserByIdAndPopulateStores() \" + userId);\n\n        _this._userService.getUserByIdAndPopulateStores(userId).subscribe({\n          next: v => {\n            console.log(\"viene el next con lo que meti dentro de global.loggedUser\");\n            console.log(v);\n            _this.loggedUser = v;\n            global.loggedUser = _this.loggedUser;\n            global.reloadNeeded = false; // console.log(this.loggedUser._id)\n\n            console.log(\"este es el objeto loggedUser desde el metodo\");\n            console.log(_this.loggedUser);\n            console.log(\"la db del usuario ->  \" + v.adminMasterDBuser);\n            console.log(\"el id del usuario ->  \" + v._id);\n            console.log(\"el role del usuario ->  \" + v.roles[0].roleName);\n            console.log(\"el username ->  \" + v.username);\n            console.log(\"el email ->  \" + v.email);\n            global.loggedUserDB = v.adminMasterDBuser;\n            global.loggedUserID = v._id;\n            global.loggedUserRole = v.roles[0].roleName;\n            global.loggedUserName = v.username;\n            global.loggedUserEmail = v.email;\n            _this.loggedUserRole = v.roles[0].roleName;\n          },\n          error: e => console.error(e),\n          complete: () => console.info('este es el complete')\n        });\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    if (this._authService.loggedIn()) {\n      console.log(\"ESTOY LOGUEADOOOOOOOOO SIDEBARRRRRRRRR\");\n\n      const userId = this._authService.getDecodedAccessToken(String(this._authService.getToken())).id;\n\n      this.getUserByIdAndPopulateStores(userId);\n      console.log(\"es esteee el roleee \" + this.loggedUserRole);\n    }\n  }\n\n  ngOnInit() {\n    /*\r\n    if (this._authService.loggedIn()){\r\n      const userId = this._authService.getDecodedAccessToken(String(this._authService.getToken())).id\r\n      console.log(\"cargo el sidebar\")\r\n      await this.getUserByIdAndPopulateStores(userId)\r\n    }\r\n    */\n\n    return _asyncToGenerator(function* () {})();\n  }\n\n  testGetUserByIdAndPopulateStores() {\n    return new Promise((resolve, reject) => {\n      const userId = this._authService.getDecodedAccessToken(String(this._authService.getToken())).id;\n\n      this.getUserByIdAndPopulateStores(userId);\n    });\n  }\n\n};\n\n__decorate([ViewChild('sidenav', {\n  static: false\n})], SidebarComponent.prototype, \"sidenav\", void 0);\n\nSidebarComponent = __decorate([Component({\n  selector: 'app-sidebar',\n  templateUrl: './sidebar.component.html',\n  styles: [],\n  providers: [StoreService, UserService]\n})], SidebarComponent);\nexport { SidebarComponent };","map":{"version":3,"sources":["C:/Users/CESAR/apiREST-LenguaDeLoro/frontendLenguaDeLoro/src/app/components/sidebar/sidebar.component.ts"],"names":["__decorate","Component","ViewChild","StoreService","UserService","global","SidebarComponent","constructor","_userService","_authService","loggedUser","loggedUserRole","getUserByIdAndPopulateStores","userId","console","log","subscribe","next","v","reloadNeeded","adminMasterDBuser","_id","roles","roleName","username","email","loggedUserDB","loggedUserID","loggedUserName","loggedUserEmail","error","e","complete","info","loggedIn","getDecodedAccessToken","String","getToken","id","ngOnInit","testGetUserByIdAndPopulateStores","Promise","resolve","reject","static","prototype","selector","templateUrl","styles","providers"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component, ViewChild } from '@angular/core';\r\nimport { StoreService } from 'src/app/services/store.service';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { global } from 'src/app/services/global';\r\nlet SidebarComponent = class SidebarComponent {\r\n    constructor(_userService, _authService) {\r\n        this._userService = _userService;\r\n        this._authService = _authService;\r\n        this.loggedUser = null;\r\n        this.loggedUserRole = global.loggedUserRole;\r\n        this.getUserByIdAndPopulateStores = async (userId) => {\r\n            console.log(\"le estoy pasando el if desde el sidebar a getUserByIdAndPopulateStores() \" + userId);\r\n            this._userService.getUserByIdAndPopulateStores(userId)\r\n                .subscribe({\r\n                next: (v) => {\r\n                    console.log(\"viene el next con lo que meti dentro de global.loggedUser\");\r\n                    console.log(v);\r\n                    this.loggedUser = v;\r\n                    global.loggedUser = this.loggedUser;\r\n                    global.reloadNeeded = false;\r\n                    // console.log(this.loggedUser._id)\r\n                    console.log(\"este es el objeto loggedUser desde el metodo\");\r\n                    console.log(this.loggedUser);\r\n                    console.log(\"la db del usuario ->  \" + v.adminMasterDBuser);\r\n                    console.log(\"el id del usuario ->  \" + v._id);\r\n                    console.log(\"el role del usuario ->  \" + v.roles[0].roleName);\r\n                    console.log(\"el username ->  \" + v.username);\r\n                    console.log(\"el email ->  \" + v.email);\r\n                    global.loggedUserDB = v.adminMasterDBuser;\r\n                    global.loggedUserID = v._id;\r\n                    global.loggedUserRole = v.roles[0].roleName;\r\n                    global.loggedUserName = v.username;\r\n                    global.loggedUserEmail = v.email;\r\n                    this.loggedUserRole = v.roles[0].roleName;\r\n                },\r\n                error: (e) => console.error(e),\r\n                complete: () => console.info('este es el complete')\r\n            });\r\n        };\r\n        if (this._authService.loggedIn()) {\r\n            console.log(\"ESTOY LOGUEADOOOOOOOOO SIDEBARRRRRRRRR\");\r\n            const userId = this._authService.getDecodedAccessToken(String(this._authService.getToken())).id;\r\n            this.getUserByIdAndPopulateStores(userId);\r\n            console.log(\"es esteee el roleee \" + this.loggedUserRole);\r\n        }\r\n    }\r\n    async ngOnInit() {\r\n        /*\r\n        if (this._authService.loggedIn()){\r\n          const userId = this._authService.getDecodedAccessToken(String(this._authService.getToken())).id\r\n          console.log(\"cargo el sidebar\")\r\n          await this.getUserByIdAndPopulateStores(userId)\r\n        }\r\n        */\r\n    }\r\n    testGetUserByIdAndPopulateStores() {\r\n        return new Promise((resolve, reject) => {\r\n            const userId = this._authService.getDecodedAccessToken(String(this._authService.getToken())).id;\r\n            this.getUserByIdAndPopulateStores(userId);\r\n        });\r\n    }\r\n};\r\n__decorate([\r\n    ViewChild('sidenav', { static: false })\r\n], SidebarComponent.prototype, \"sidenav\", void 0);\r\nSidebarComponent = __decorate([\r\n    Component({\r\n        selector: 'app-sidebar',\r\n        templateUrl: './sidebar.component.html',\r\n        styles: [],\r\n        providers: [StoreService, UserService]\r\n    })\r\n], SidebarComponent);\r\nexport { SidebarComponent };\r\n"]},"metadata":{},"sourceType":"module"}