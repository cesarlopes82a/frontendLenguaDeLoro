{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\CESAR\\\\apiREST-LenguaDeLoro\\\\frontendLenguaDeLoro\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { global } from 'src/app/services/global';\nlet UsersComponent = class UsersComponent {\n  constructor(_userService, _router) {\n    this._userService = _userService;\n    this._router = _router;\n    this.tiendasSeleccionadas = [];\n    this.estadoDeTiendas = []; // es un array de todas las stores que tiene el adminMaster + un booleano asignada:true/false que me dice si el usuario ya la tiene asignada o no\n\n    this.url = global.url, this.title = \"U S U A R I O S\";\n  }\n\n  ngOnInit() {\n    // busco todos los usuarios para poder cargar la tabla de usuarios\n    this.getUsersAndPopulate();\n  }\n\n  getUsersAndPopulate() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.log(\"MENSAJE: Obteniendo lista de usuarios...\");\n      yield _this._userService.getUsersAndPopulate().subscribe({\n        next: v => {\n          console.log(\"MENSAJE: Lista de usuarios obtenida con exito\");\n          console.log(v);\n          _this.usuarios = v;\n\n          _this.usuarios.forEach(usuario => {\n            console.log(\"el rol\");\n            usuario.roles.forEach(role => {\n              console.log(role.roleName);\n            });\n          });\n        },\n        error: e => console.error(e),\n        complete: () => console.info('este es el complete')\n      });\n    })();\n  }\n\n  deleteUsuario(idUsuario) {\n    console.log(\"intento eliminar el usuario\");\n  }\n\n  onChange(tiendaId, isChecked) {\n    if (isChecked) {\n      console.log(\"agrego la tienda \" + tiendaId + \" al array de tiendas seleccionadassss desde le onChange()\");\n      this.tiendasSeleccionadas.push(tiendaId);\n    } else {\n      let index = this.tiendasSeleccionadas.indexOf(tiendaId);\n      this.tiendasSeleccionadas.splice(index, 1);\n    }\n  }\n\n  listarLasTiendas(usuarioId) {\n    this.usrAlQLQuieroAddTienda = usuarioId; //vacio el array de estadoDeTiendas\n\n    this.estadoDeTiendas.splice(0, this.estadoDeTiendas.length); //vacio el array de tiendasSeleccionadas\n\n    this.tiendasSeleccionadas.splice(0, this.tiendasSeleccionadas.length); //voy a buscar el adminMaster para obtener el listado de todas las tiendas.\n\n    this.usuarios.every(usuario => {\n      if (usuario.roles[0].roleName === 'adminMaster') {\n        this.adminMasterTiendas = usuario.tiendas;\n        return false;\n      }\n\n      return true;\n    }); //voy a buscar el usuario por el id que me pasan y lleno el array de tiendasAsignadas a este usuario\n\n    this.usuarios.every(usuario => {\n      //voy a llenar el array tiendasAsignadas con objetos de tipo objTienda\n      if (usuario._id == usuarioId) {\n        if (usuario.tiendas.length > 0) {\n          // <-- esto me dice si el usuario tiene alguna tienda asignada o no tiene ninguna. si es =0 meto todas las tiendas con el parametro asignadas=false\n          //reviso todas las tiendas que tiene para saber si el estado de objTienda.asignada va a ser true o false\n          var contador = 0;\n          this.adminMasterTiendas.forEach(adminMasterTienda => {\n            //inicializo un objeto tienda para tenerlo precargado\n            let objTienda = {\n              'store': \"\",\n              'asignada': false\n            };\n            contador = contador + 1;\n            console.log(\"adminMasterTienda numero: \" + contador + \" - \" + adminMasterTienda.store._id);\n            objTienda.store = adminMasterTienda.store;\n            objTienda.asignada = false; //ahora voy a recorrer el las tiendas del usuario para hacer un mach \n\n            var contadorUsuario = 0;\n            usuario.tiendas.every(usuarioTienda => {\n              contadorUsuario = contadorUsuario + 1;\n              console.log(\"--- contadorUsuario: \" + contadorUsuario);\n\n              if (adminMasterTienda.store._id == usuarioTienda.store._id) {\n                //agrego la tienda al array de tiendas seleccionadas\n                this.tiendasSeleccionadas.push(adminMasterTienda.store._id);\n                objTienda.asignada = true;\n                return false;\n              }\n\n              return true;\n            });\n            console.log(\"push\");\n            this.estadoDeTiendas.push(objTienda);\n          });\n        } else {\n          //meto todas las tiendas con el parametro asignadas=false\n          this.adminMasterTiendas.forEach(tienda => {\n            let objTienda = {\n              'store': \"\",\n              'asignada': false\n            };\n            objTienda.store = tienda.store;\n            objTienda.asignada = false;\n            this.estadoDeTiendas.push(objTienda);\n          });\n          console.log(this.adminMasterTiendas);\n          console.log(this.estadoDeTiendas);\n        }\n\n        return false;\n      }\n\n      return true;\n    });\n    console.log(\"estas son las tiendasAsignadas FINALLLLLLL\");\n    console.log(this.estadoDeTiendas);\n  }\n\n  onCheckChange(event) {\n    //console.log(\"elvenettttt \", event)\n    if (event.target.checked) {\n      //console.log(\"agrego la tienda al array de tiendas seleccionadas \" + event.target.id + \" desde el onCheckChange()\")\n      //console.log(\"este es el array de tiendasSeleccionadas antes de hacer el push\")\n      //console.log(this.tiendasSeleccionadas)\n      this.tiendasSeleccionadas.push(event.target.id);\n      console.log(\"este es el array de tiendasSeleccionadas DESPUES del push\");\n      console.log(this.tiendasSeleccionadas);\n    } else {\n      //console.log(\"SACO la tienda al array de tiendas seleccionadas \" + event.target.id + \" desde el onCheckChange()\")\n      //console.log(\"este es el array de tiendasSeleccionadas antes de hacer el splice\")\n      //console.log(this.tiendasSeleccionadas)\n      let index = this.tiendasSeleccionadas.indexOf(event.target.id);\n      this.tiendasSeleccionadas.splice(index, 1);\n      console.log(\"este es el array de tiendasSeleccionadas DESPUES de hacer el splice\");\n      console.log(this.tiendasSeleccionadas);\n    }\n  }\n\n  guardarSeleccion() {\n    console.log(\"GUARDO!\");\n    this.tiendasSeleccionadas.forEach(tiendasSeleccionada => {\n      console.log(\"intentando asignar la tienda \" + tiendasSeleccionada + \" al user \" + this.usrAlQLQuieroAddTienda);\n      this.addStoreToUserFromRoute(this.usrAlQLQuieroAddTienda, tiendasSeleccionada);\n      console.log(\"esta es una tienda seleccionada\");\n      console.log(tiendasSeleccionada);\n    });\n  }\n\n  addStoreToUserFromRoute(userId, storeId) {\n    this._userService.addStoreToUserFromRoute(userId, storeId).subscribe({\n      next: v => {\n        console.log(\"this._userService.addStoreToUserFromRoute(userId, storeId)\");\n        console.log(\"this._userService.addStoreToUserFromRoute(\" + userId + \", \" + storeId + \")\");\n        console.log(v);\n        this.getUsersAndPopulate();\n\n        this._router.navigate(['/usuarios']);\n      },\n      error: e => console.error(e),\n      complete: () => console.info('este es el complete del addStoreToUserFromRoute()')\n    });\n  }\n\n  testClick() {\n    console.log(\"hice click en el boton\");\n  }\n\n  pidoEliminar(idUsuario) {\n    this.quieroEliminarEsteUsuario = idUsuario;\n    console.log(\"es este: \" + this.quieroEliminarEsteUsuario);\n  }\n\n  consultoEstadoEliminar(idUsuario) {\n    if (idUsuario == this.quieroEliminarEsteUsuario) return true;\n    return false;\n  }\n\n  pidoCancelarEliminar() {\n    this.quieroEliminarEsteUsuario = \"\";\n  }\n\n  getUsers() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2._userService.getUsers().subscribe({\n        next: v => {\n          console.log(\"estos son los usuarios\");\n          console.log(v);\n          _this2.usuarios = v;\n        },\n        error: e => console.error(e),\n        complete: () => console.info('este es el complete')\n      });\n    })();\n  }\n\n};\nUsersComponent = __decorate([Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styles: []\n})], UsersComponent);\nexport { UsersComponent };","map":{"version":3,"sources":["C:/Users/CESAR/apiREST-LenguaDeLoro/frontendLenguaDeLoro/src/app/components/users/users.component.ts"],"names":["__decorate","Component","global","UsersComponent","constructor","_userService","_router","tiendasSeleccionadas","estadoDeTiendas","url","title","ngOnInit","getUsersAndPopulate","console","log","subscribe","next","v","usuarios","forEach","usuario","roles","role","roleName","error","e","complete","info","deleteUsuario","idUsuario","onChange","tiendaId","isChecked","push","index","indexOf","splice","listarLasTiendas","usuarioId","usrAlQLQuieroAddTienda","length","every","adminMasterTiendas","tiendas","_id","contador","adminMasterTienda","objTienda","store","asignada","contadorUsuario","usuarioTienda","tienda","onCheckChange","event","target","checked","id","guardarSeleccion","tiendasSeleccionada","addStoreToUserFromRoute","userId","storeId","navigate","testClick","pidoEliminar","quieroEliminarEsteUsuario","consultoEstadoEliminar","pidoCancelarEliminar","getUsers","selector","templateUrl","styles"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component } from '@angular/core';\r\nimport { global } from 'src/app/services/global';\r\nlet UsersComponent = class UsersComponent {\r\n    constructor(_userService, _router) {\r\n        this._userService = _userService;\r\n        this._router = _router;\r\n        this.tiendasSeleccionadas = [];\r\n        this.estadoDeTiendas = []; // es un array de todas las stores que tiene el adminMaster + un booleano asignada:true/false que me dice si el usuario ya la tiene asignada o no\r\n        this.url = global.url,\r\n            this.title = \"U S U A R I O S\";\r\n    }\r\n    ngOnInit() {\r\n        // busco todos los usuarios para poder cargar la tabla de usuarios\r\n        this.getUsersAndPopulate();\r\n    }\r\n    async getUsersAndPopulate() {\r\n        console.log(\"MENSAJE: Obteniendo lista de usuarios...\");\r\n        await this._userService.getUsersAndPopulate()\r\n            .subscribe({\r\n            next: (v) => {\r\n                console.log(\"MENSAJE: Lista de usuarios obtenida con exito\");\r\n                console.log(v);\r\n                this.usuarios = v;\r\n                this.usuarios.forEach((usuario) => {\r\n                    console.log(\"el rol\");\r\n                    usuario.roles.forEach((role) => {\r\n                        console.log(role.roleName);\r\n                    });\r\n                });\r\n            },\r\n            error: (e) => console.error(e),\r\n            complete: () => console.info('este es el complete')\r\n        });\r\n    }\r\n    deleteUsuario(idUsuario) {\r\n        console.log(\"intento eliminar el usuario\");\r\n    }\r\n    onChange(tiendaId, isChecked) {\r\n        if (isChecked) {\r\n            console.log(\"agrego la tienda \" + tiendaId + \" al array de tiendas seleccionadassss desde le onChange()\");\r\n            this.tiendasSeleccionadas.push(tiendaId);\r\n        }\r\n        else {\r\n            let index = this.tiendasSeleccionadas.indexOf(tiendaId);\r\n            this.tiendasSeleccionadas.splice(index, 1);\r\n        }\r\n    }\r\n    listarLasTiendas(usuarioId) {\r\n        this.usrAlQLQuieroAddTienda = usuarioId;\r\n        //vacio el array de estadoDeTiendas\r\n        this.estadoDeTiendas.splice(0, this.estadoDeTiendas.length);\r\n        //vacio el array de tiendasSeleccionadas\r\n        this.tiendasSeleccionadas.splice(0, this.tiendasSeleccionadas.length);\r\n        //voy a buscar el adminMaster para obtener el listado de todas las tiendas.\r\n        this.usuarios.every((usuario) => {\r\n            if (usuario.roles[0].roleName === 'adminMaster') {\r\n                this.adminMasterTiendas = usuario.tiendas;\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        //voy a buscar el usuario por el id que me pasan y lleno el array de tiendasAsignadas a este usuario\r\n        this.usuarios.every((usuario) => {\r\n            //voy a llenar el array tiendasAsignadas con objetos de tipo objTienda\r\n            if (usuario._id == usuarioId) {\r\n                if (usuario.tiendas.length > 0) { // <-- esto me dice si el usuario tiene alguna tienda asignada o no tiene ninguna. si es =0 meto todas las tiendas con el parametro asignadas=false\r\n                    //reviso todas las tiendas que tiene para saber si el estado de objTienda.asignada va a ser true o false\r\n                    var contador = 0;\r\n                    this.adminMasterTiendas.forEach((adminMasterTienda) => {\r\n                        //inicializo un objeto tienda para tenerlo precargado\r\n                        let objTienda = {\r\n                            'store': \"\",\r\n                            'asignada': false\r\n                        };\r\n                        contador = contador + 1;\r\n                        console.log(\"adminMasterTienda numero: \" + contador + \" - \" + adminMasterTienda.store._id);\r\n                        objTienda.store = adminMasterTienda.store;\r\n                        objTienda.asignada = false;\r\n                        //ahora voy a recorrer el las tiendas del usuario para hacer un mach \r\n                        var contadorUsuario = 0;\r\n                        usuario.tiendas.every((usuarioTienda) => {\r\n                            contadorUsuario = contadorUsuario + 1;\r\n                            console.log(\"--- contadorUsuario: \" + contadorUsuario);\r\n                            if (adminMasterTienda.store._id == usuarioTienda.store._id) {\r\n                                //agrego la tienda al array de tiendas seleccionadas\r\n                                this.tiendasSeleccionadas.push(adminMasterTienda.store._id);\r\n                                objTienda.asignada = true;\r\n                                return false;\r\n                            }\r\n                            return true;\r\n                        });\r\n                        console.log(\"push\");\r\n                        this.estadoDeTiendas.push(objTienda);\r\n                    });\r\n                }\r\n                else {\r\n                    //meto todas las tiendas con el parametro asignadas=false\r\n                    this.adminMasterTiendas.forEach((tienda) => {\r\n                        let objTienda = {\r\n                            'store': \"\",\r\n                            'asignada': false\r\n                        };\r\n                        objTienda.store = tienda.store;\r\n                        objTienda.asignada = false;\r\n                        this.estadoDeTiendas.push(objTienda);\r\n                    });\r\n                    console.log(this.adminMasterTiendas);\r\n                    console.log(this.estadoDeTiendas);\r\n                }\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        console.log(\"estas son las tiendasAsignadas FINALLLLLLL\");\r\n        console.log(this.estadoDeTiendas);\r\n    }\r\n    onCheckChange(event) {\r\n        //console.log(\"elvenettttt \", event)\r\n        if (event.target.checked) {\r\n            //console.log(\"agrego la tienda al array de tiendas seleccionadas \" + event.target.id + \" desde el onCheckChange()\")\r\n            //console.log(\"este es el array de tiendasSeleccionadas antes de hacer el push\")\r\n            //console.log(this.tiendasSeleccionadas)\r\n            this.tiendasSeleccionadas.push(event.target.id);\r\n            console.log(\"este es el array de tiendasSeleccionadas DESPUES del push\");\r\n            console.log(this.tiendasSeleccionadas);\r\n        }\r\n        else {\r\n            //console.log(\"SACO la tienda al array de tiendas seleccionadas \" + event.target.id + \" desde el onCheckChange()\")\r\n            //console.log(\"este es el array de tiendasSeleccionadas antes de hacer el splice\")\r\n            //console.log(this.tiendasSeleccionadas)\r\n            let index = this.tiendasSeleccionadas.indexOf(event.target.id);\r\n            this.tiendasSeleccionadas.splice(index, 1);\r\n            console.log(\"este es el array de tiendasSeleccionadas DESPUES de hacer el splice\");\r\n            console.log(this.tiendasSeleccionadas);\r\n        }\r\n    }\r\n    guardarSeleccion() {\r\n        console.log(\"GUARDO!\");\r\n        this.tiendasSeleccionadas.forEach((tiendasSeleccionada) => {\r\n            console.log(\"intentando asignar la tienda \" + tiendasSeleccionada + \" al user \" + this.usrAlQLQuieroAddTienda);\r\n            this.addStoreToUserFromRoute(this.usrAlQLQuieroAddTienda, tiendasSeleccionada);\r\n            console.log(\"esta es una tienda seleccionada\");\r\n            console.log(tiendasSeleccionada);\r\n        });\r\n    }\r\n    addStoreToUserFromRoute(userId, storeId) {\r\n        this._userService.addStoreToUserFromRoute(userId, storeId)\r\n            .subscribe({\r\n            next: (v) => {\r\n                console.log(\"this._userService.addStoreToUserFromRoute(userId, storeId)\");\r\n                console.log(\"this._userService.addStoreToUserFromRoute(\" + userId + \", \" + storeId + \")\");\r\n                console.log(v);\r\n                this.getUsersAndPopulate();\r\n                this._router.navigate(['/usuarios']);\r\n            },\r\n            error: (e) => console.error(e),\r\n            complete: () => console.info('este es el complete del addStoreToUserFromRoute()')\r\n        });\r\n    }\r\n    testClick() {\r\n        console.log(\"hice click en el boton\");\r\n    }\r\n    pidoEliminar(idUsuario) {\r\n        this.quieroEliminarEsteUsuario = idUsuario;\r\n        console.log(\"es este: \" + this.quieroEliminarEsteUsuario);\r\n    }\r\n    consultoEstadoEliminar(idUsuario) {\r\n        if (idUsuario == this.quieroEliminarEsteUsuario)\r\n            return true;\r\n        return false;\r\n    }\r\n    pidoCancelarEliminar() {\r\n        this.quieroEliminarEsteUsuario = \"\";\r\n    }\r\n    async getUsers() {\r\n        this._userService.getUsers()\r\n            .subscribe({\r\n            next: (v) => {\r\n                console.log(\"estos son los usuarios\");\r\n                console.log(v);\r\n                this.usuarios = v;\r\n            },\r\n            error: (e) => console.error(e),\r\n            complete: () => console.info('este es el complete')\r\n        });\r\n    }\r\n};\r\nUsersComponent = __decorate([\r\n    Component({\r\n        selector: 'app-users',\r\n        templateUrl: './users.component.html',\r\n        styles: [],\r\n    })\r\n], UsersComponent);\r\nexport { UsersComponent };\r\n"]},"metadata":{},"sourceType":"module"}