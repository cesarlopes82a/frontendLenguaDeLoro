{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\CESAR\\\\apiREST-LenguaDeLoro\\\\frontendLenguaDeLoro\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { Listadeprecios } from '../models/listadeprecio';\nimport { global } from '../services/global';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ListadepreciosService {\n  constructor(_http) {\n    this._http = _http;\n    this.enviarListId = new EventEmitter();\n    this._productsList = [];\n    this.url = global.url;\n  }\n\n  testFuncion() {\n    console.log(\"testFuncion() desde el servicio\");\n  }\n\n  nuevoPrecioVenta(precioVenta) {\n    console.log(\"nuevo precio de venta: \" + precioVenta);\n  }\n\n  addProductTothelist(product) {\n    this._productsList.push(product);\n  }\n\n  deleteProductOfthelist(id) {\n    const product = this._productsList.findIndex(c => c._id === id);\n\n    this._productsList.splice(product, 1);\n  }\n\n  getAllProductsOfthelist() {\n    return this._productsList;\n  }\n\n  registrarNuevaLDP(_productsList, ldpNombre, ldpDescripcion, fechaDeCreacion, storeId) {\n    let listadeprecios = new Listadeprecios(ldpNombre, ldpDescripcion, _productsList, String(localStorage.getItem(\"loggedUserID\")), fechaDeCreacion, storeId);\n    let params = JSON.stringify(listadeprecios);\n    console.log(\"MENSAJE: listadeprecios.service - registrarNuevaLDP() - registrando nueva lista de precios.\");\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    console.log(\"la lista de precios q voy a pasar------------------------------------\");\n    console.log(listadeprecios);\n    return this._http.post(this.url + '/ldp/registrarLDP', params, {\n      headers\n    });\n  }\n\n  getListasdpByStoreIdAndPopulateInfo(storeId) {\n    console.log(\"estoy dentro del getListasdpByStoreIdAndPopulateInfo desde el listadeprecios.service.ts\");\n    let cabeceras = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.get(this.url + '/ldp/store/' + storeId, {\n      headers: cabeceras\n    });\n  }\n\n  getListaDpByIdAndPopulateProducts(listaId) {\n    console.log(\"MENSAJE: getListasdpByStoreIdAndPopulateInfo() desde el listadeprecios.service.ts ListaID: \" + listaId);\n    let cabeceras = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.get(this.url + '/ldp/' + listaId, {\n      headers: cabeceras\n    });\n  }\n\n  setListaId(listaId) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.listaOrigen = listaId;\n    })();\n  }\n\n  getListaId() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this2.listaOrigen;\n    })();\n  }\n\n  clearListaId() {\n    this.listaOrigen = \"\";\n  }\n\n  setDefaultStoreLDP(listaId) {\n    let cabeceras = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.get(this.url + '/ldp/setDefaultStoreLDP/' + listaId, {\n      headers: cabeceras\n    });\n  }\n\n}\n\nListadepreciosService.ɵfac = function ListadepreciosService_Factory(t) {\n  return new (t || ListadepreciosService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nListadepreciosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ListadepreciosService,\n  factory: ListadepreciosService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/CESAR/apiREST-LenguaDeLoro/frontendLenguaDeLoro/src/app/services/listadeprecios.service.ts"],"names":["HttpHeaders","EventEmitter","Listadeprecios","global","i0","i1","ListadepreciosService","constructor","_http","enviarListId","_productsList","url","testFuncion","console","log","nuevoPrecioVenta","precioVenta","addProductTothelist","product","push","deleteProductOfthelist","id","findIndex","c","_id","splice","getAllProductsOfthelist","registrarNuevaLDP","ldpNombre","ldpDescripcion","fechaDeCreacion","storeId","listadeprecios","String","localStorage","getItem","params","JSON","stringify","headers","set","post","getListasdpByStoreIdAndPopulateInfo","cabeceras","get","getListaDpByIdAndPopulateProducts","listaId","setListaId","listaOrigen","getListaId","clearListaId","setDefaultStoreLDP","ɵfac","ListadepreciosService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { Listadeprecios } from '../models/listadeprecio';\r\nimport { global } from '../services/global';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class ListadepreciosService {\r\n    constructor(_http) {\r\n        this._http = _http;\r\n        this.enviarListId = new EventEmitter();\r\n        this._productsList = [];\r\n        this.url = global.url;\r\n    }\r\n    testFuncion() {\r\n        console.log(\"testFuncion() desde el servicio\");\r\n    }\r\n    nuevoPrecioVenta(precioVenta) {\r\n        console.log(\"nuevo precio de venta: \" + precioVenta);\r\n    }\r\n    addProductTothelist(product) {\r\n        this._productsList.push(product);\r\n    }\r\n    deleteProductOfthelist(id) {\r\n        const product = this._productsList.findIndex(c => c._id === id);\r\n        this._productsList.splice(product, 1);\r\n    }\r\n    getAllProductsOfthelist() {\r\n        return this._productsList;\r\n    }\r\n    registrarNuevaLDP(_productsList, ldpNombre, ldpDescripcion, fechaDeCreacion, storeId) {\r\n        let listadeprecios = new Listadeprecios(ldpNombre, ldpDescripcion, _productsList, String(localStorage.getItem(\"loggedUserID\")), fechaDeCreacion, storeId);\r\n        let params = JSON.stringify(listadeprecios);\r\n        console.log(\"MENSAJE: listadeprecios.service - registrarNuevaLDP() - registrando nueva lista de precios.\");\r\n        let headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n        console.log(\"la lista de precios q voy a pasar------------------------------------\");\r\n        console.log(listadeprecios);\r\n        return this._http.post(this.url + '/ldp/registrarLDP', params, { headers });\r\n    }\r\n    getListasdpByStoreIdAndPopulateInfo(storeId) {\r\n        console.log(\"estoy dentro del getListasdpByStoreIdAndPopulateInfo desde el listadeprecios.service.ts\");\r\n        let cabeceras = new HttpHeaders().set('Content-Type', 'application/json');\r\n        return this._http.get(this.url + '/ldp/store/' + storeId, { headers: cabeceras });\r\n    }\r\n    getListaDpByIdAndPopulateProducts(listaId) {\r\n        console.log(\"MENSAJE: getListasdpByStoreIdAndPopulateInfo() desde el listadeprecios.service.ts ListaID: \" + listaId);\r\n        let cabeceras = new HttpHeaders().set('Content-Type', 'application/json');\r\n        return this._http.get(this.url + '/ldp/' + listaId, { headers: cabeceras });\r\n    }\r\n    async setListaId(listaId) {\r\n        this.listaOrigen = listaId;\r\n    }\r\n    async getListaId() {\r\n        return this.listaOrigen;\r\n    }\r\n    clearListaId() {\r\n        this.listaOrigen = \"\";\r\n    }\r\n    setDefaultStoreLDP(listaId) {\r\n        let cabeceras = new HttpHeaders().set('Content-Type', 'application/json');\r\n        return this._http.get(this.url + '/ldp/setDefaultStoreLDP/' + listaId, { headers: cabeceras });\r\n    }\r\n}\r\nListadepreciosService.ɵfac = function ListadepreciosService_Factory(t) { return new (t || ListadepreciosService)(i0.ɵɵinject(i1.HttpClient)); };\r\nListadepreciosService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ListadepreciosService, factory: ListadepreciosService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}